
import java.awt.Color;
import java.awt.Font;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Administrator
 */
public class PnlArcUsers extends javax.swing.JPanel {

    protected ConnectDB connection=null;
    protected DefaultTableModel tblModel;
    
    
    public PnlArcUsers(ConnectDB connection) {
        initComponents();
        this.setSize(710, 470);
        this.connection=connection;
        this.tblModel = (DefaultTableModel) tblArcUsers.getModel();
        
        //design sa table header wala kasi sa design tab
        this.tblArcUsers.getTableHeader().setFont(new Font("Sogoe UI", Font.BOLD, 16));  
        this.tblArcUsers.getTableHeader().setBackground(new Color(0xEADBC8));
        this.tblArcUsers.getTableHeader().setBorder(BorderFactory.createEmptyBorder());
        
        this.tblArcUsers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        this.tblArcUsers.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
           
            public void valueChanged(ListSelectionEvent e) {
                
                
                
                // Check kung marami nakaselect na row
                if (tblArcUsers.getSelectedRowCount() > 1) {
                   //nililimit sa isa lang yung pagselect ng rows
                    int[] selectedRows = tblArcUsers.getSelectedRows();
                    tblArcUsers.getSelectionModel().setSelectionInterval(selectedRows[0], selectedRows[0]);
                }
            }
        });
        
        this.displayArcUsersTbl();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblArcUsers = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(254, 250, 246));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(254, 250, 246)));

        tblArcUsers.setAutoCreateRowSorter(true);
        tblArcUsers.setBackground(new java.awt.Color(254, 250, 246));
        tblArcUsers.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        tblArcUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "User ID", "Name", "Admin", "Password"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArcUsers.setFillsViewportHeight(true);
        tblArcUsers.setGridColor(new java.awt.Color(254, 250, 246));
        tblArcUsers.setIntercellSpacing(new java.awt.Dimension(5, 5));
        tblArcUsers.setRowHeight(25);
        tblArcUsers.setSelectionBackground(new java.awt.Color(16, 44, 87));
        tblArcUsers.setSelectionForeground(new java.awt.Color(254, 250, 246));
        tblArcUsers.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblArcUsers);
        if (tblArcUsers.getColumnModel().getColumnCount() > 0) {
            tblArcUsers.getColumnModel().getColumn(0).setResizable(false);
            tblArcUsers.getColumnModel().getColumn(0).setPreferredWidth(7);
            tblArcUsers.getColumnModel().getColumn(0).setCellRenderer(new DefaultTableCellRenderer() {
                {
                    setHorizontalAlignment(SwingConstants.CENTER);
                }
            });
            tblArcUsers.getColumnModel().getColumn(1).setResizable(false);
            tblArcUsers.getColumnModel().getColumn(2).setResizable(false);
            tblArcUsers.getColumnModel().getColumn(2).setPreferredWidth(10);
            tblArcUsers.getColumnModel().getColumn(2).setCellRenderer(new DefaultTableCellRenderer() {
                {
                    setHorizontalAlignment(SwingConstants.CENTER);
                }
            });
            tblArcUsers.getColumnModel().getColumn(3).setResizable(false);
            tblArcUsers.getColumnModel().getColumn(3).setCellRenderer(new DefaultTableCellRenderer() {
                {
                    setHorizontalAlignment(SwingConstants.CENTER);
                }
            });
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("USERS");

        jButton1.setBackground(new java.awt.Color(218, 192, 163));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-refresh-document-from-company-digital-file-system-48.png"))); // NOI18N
        jButton1.setText("Retrieve");
        jButton1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(16, 44, 87), 2, true));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    //retrieve button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedRow = tblArcUsers.getSelectedRow();
                
        if(selectedRow==-1){
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        
        int response = JOptionPane.showConfirmDialog(this,"Are you sure want to retrieve this item?",
                        "Confirmation",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE );
        switch(response){
            case 0:
                
                
                    String uID=""+tblArcUsers.getValueAt(selectedRow, 0);
                    String name=""+tblArcUsers.getValueAt(selectedRow, 1);
                    String isAdmin=""+tblArcUsers.getValueAt(selectedRow, 2);
                    String password=""+tblArcUsers.getValueAt(selectedRow, 3);
                    
                    try{
                        //lagay sa menu table then alisin sa archive
                        String command="INSERT INTO USERS (user_id, name, admin, password) VALUES(?,?,?,?)";
                        PreparedStatement ps = connection.con.prepareStatement(command);
                        ps.setInt(1, Integer.parseInt(uID));
                        ps.setString(2, name);
                        ps.setBoolean(3, Boolean.parseBoolean(isAdmin));
                        ps.setString(4, password);

                        ps.executeUpdate();
                        
                        
                        //delete sa archive
                        ps = connection.con.prepareStatement("DELETE FROM ARCUSERS WHERE user_id=?");
                        ps.setInt(1, Integer.parseInt(uID));
                        ps.executeUpdate();
                        
                        JOptionPane.showMessageDialog(this, "Item Successfully Retrieve");
                        
                        this.displayArcUsersTbl(); 
                        ps.close();
                        
                        
                    }catch(Exception e){      
                        System.out.println(e.getMessage());
                    }
                
                
                
                break;
                
            case 1:
                
                break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    private void displayArcUsersTbl(){
        if(tblModel.getRowCount()>0){
            for(int i =tblModel.getRowCount()-1; i>=0; i--){
                tblModel.removeRow(i);
            }
        }
        
        
        String command="SELECT * FROM ARCUSERS ORDER BY USER_ID";
        ResultSet results=connection.getResult(command);
        
        
        try{
            while(results.next()){
                int uID = results.getInt("user_id");
                String name = results.getString("name");
                boolean isAdmin= results.getBoolean("admin");
                String password = results.getString("password");
                
                String newRow[]={""+uID, name, ""+isAdmin, password};
                
                tblModel.addRow(newRow);
                
            }
            results.close();
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblArcUsers;
    // End of variables declaration//GEN-END:variables
}
